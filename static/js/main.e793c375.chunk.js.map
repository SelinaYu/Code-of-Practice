{"version":3,"sources":["DragScaleView.js","index.js","style.less"],"names":["DragScaleView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","dsStyle","state","width","objectSpread","left","concat","setState","handleMouseUp","document","onmouseup","onmousemove","handleScale","e","initY","clientY","initX","clientX","dsView","querySelector","westBar","eastBar","northBar","southBar","height","offsetHeight","offsetWidth","dLeft","offsetLeft","dTop","offsetTop","totalWidth","window","innerWidth","totalHeight","innerHeight","_ref","minWidth","minHeight","parseInt","up","down","right","upLeft","downLeft","upRight","downRight","dragging","handleEvent","updateScrollBar","currentW","currentH","style","cY","diffY","Math","max","top","cX","diffX","maxLeft","maxTop","getSelection","removeAllRanges","target","id","offsetX","offsetY","_this$props","content","visible","react_default","a","createElement","className","onMouseDown","Component","App","src_DragScaleView","render","src_App","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.e793c375.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './style.less';\nclass DragScaleView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dsStyle: props.dsStyle,\n      offsetX: 0,\n      offsetY: 0\n    };\n  }\n\n  componentDidMount = () => {\n    let { dsStyle } = this.state;\n    if (dsStyle && dsStyle.width) {\n      dsStyle = {  left: `calc(50vw - ${dsStyle.width}/2)`,...dsStyle };\n      this.setState({ dsStyle });\n    } \n  }\n  handleMouseUp = () => {\n    document.onmouseup = () => {\n      document.onmousemove = null;\n      document.onmouseup = null;\n    };\n    return false;\n  }\n  handleScale = (e) => {\n    let initY = e.clientY;\n    let initX = e.clientX;\n    let dsView = document.querySelector('#dsView');\n    let westBar = document.querySelector('#cursor-west');\n    let eastBar = document.querySelector('#cursor-east');\n    let northBar = document.querySelector('#cursor-north');\n    let southBar = document.querySelector('#cursor-south');\n    let height = dsView.offsetHeight;\n    let width = dsView.offsetWidth;\n    let dLeft = dsView.offsetLeft;\n    let dTop = dsView.offsetTop;\n    let totalWidth = window.innerWidth;\n    let totalHeight = window.innerHeight;\n    const { dsStyle } = this.state;\n    let { minWidth, minHeight } = dsStyle || {};\n    minWidth = parseInt(minWidth);\n    minHeight = parseInt(minHeight);\n    let handleEvent = function() {};\n    let up;\n    let down;\n    let left;\n    let right;\n    let upLeft;\n    let downLeft;\n    let upRight;\n    let downRight;\n    let dragging;\n    const updateScrollBar = (currentW, currentH) => {\n      if (currentW < minWidth || currentH < minHeight) return;\n      northBar.style.width = (currentW - 20) + 'px';\n      southBar.style.width = (currentW - 20) + 'px';\n      westBar.style.height = (currentH - 20) + 'px';\n      eastBar.style.height = (currentH - 20) + 'px';\n    };\n    up = e => {\n      let cY = e.clientY;\n      let diffY = initY - cY;\n      let currentH =  Math.max(height + diffY, minHeight);\n      dsView.style.height = currentH + 'px';\n      dsView.style.top = cY + 'px';\n      updateScrollBar(width, currentH);\n      return false;\n    };\n    down = e => {\n      let cY = e.clientY;\n      let diffY = cY - initY;\n      let currentH =  Math.max(height + diffY, minHeight);\n      dsView.style.height = currentH + 'px';\n      updateScrollBar(width, currentH);\n      return false;\n    };\n    left = e => {\n      let cX = e.clientX;\n      let diffX = initX - cX;\n      let currentW = Math.max(width + diffX, minWidth);\n      dsView.style.width = currentW + 'px';\n      dsView.style.left = cX + 'px';\n      northBar.style.width = (currentW - 20) + 'px';\n      southBar.style.width = (currentW - 20) + 'px';\n      updateScrollBar(currentW, height);\n\n      return false;\n    };\n    right = e => {\n      let cX = e.clientX;\n      let diffX = cX - initX;\n      let currentW = Math.max(width + diffX, minWidth);\n      dsView.style.width = currentW + 'px';\n      updateScrollBar(currentW, height);\n      return false;\n    };\n    upLeft = e => {\n      let cX = e.clientX;\n      let cY = e.clientY;\n      let diffX = initX - cX;\n      let diffY = initY - cY;\n      let currentH =  Math.max(height + diffY, minHeight);\n      let currentW = Math.max(width + diffX, minWidth);\n\n      dsView.style.width = currentW + 'px';\n      dsView.style.height = currentH + 'px';\n      dsView.style.left = cX + 'px';\n      dsView.style.top = cY + 'px';\n      updateScrollBar(currentW, currentH);\n      return false;\n    };\n    downRight = e => {\n      let cX = e.clientX;\n      let cY = e.clientY;\n      let diffX = cX - initX;\n      let diffY = cY - initY;\n      let currentH =  Math.max(height + diffY, minHeight);\n      let currentW = Math.max(width + diffX, minWidth);\n      dsView.style.width = currentW + 'px';\n      dsView.style.height = currentH + 'px';\n      updateScrollBar(currentW, currentH);\n      return false;\n    };\n    upRight = e => {\n      let cX = e.clientX;\n      let cY = e.clientY;\n      let diffX = cX - initX;\n      let diffY = initY - cY;\n      let currentH =  Math.max(height + diffY, minHeight);\n      let currentW = Math.max(width + diffX, minWidth);\n      dsView.style.width = currentW + 'px';\n      dsView.style.height = currentH + 'px';\n      dsView.style.top = cY + 'px';\n      updateScrollBar(currentW, currentH);\n      return false;\n    };\n    downLeft = e => {\n      let cX = e.clientX;\n      let cY = e.clientY;\n      let diffX = initX - cX;\n      let diffY = cY - initY;\n      let currentH =  Math.max(height + diffY, minHeight);\n      let currentW = Math.max(width + diffX, minWidth);\n      dsView.style.width = currentW + 'px';\n      dsView.style.height = currentH + 'px';\n      dsView.style.left = cX + 'px';\n      updateScrollBar(currentW, currentH);\n      return false;\n    };\n    dragging = e => {\n      let cX = e.clientX;\n      let cY = e.clientY;\n      let diffX = cX - initX;\n      let diffY = cY - initY;\n      let left = dLeft + diffX;\n      let top  = dTop + diffY;\n      let maxLeft = totalWidth - width;\n      let maxTop = totalHeight - height;\n      // 区域限制\n      if (left < 0) {\n        dsView.style.left = 0;\n      } else if (left > maxLeft) {\n        dsView.style.left = maxLeft + 'px';\n      } else {\n        dsView.style.left = left + 'px';\n      }\n      if (top < 0) {\n        dsView.style.top = 0;\n      } else if (top > maxTop) {\n        dsView.style.top = maxTop + 'px';\n      } else {\n        dsView.style.top = top + 'px';\n      }\n      window.getSelection().removeAllRanges();\n\n    };\n    let eleId = e.target.id;\n    switch (eleId) {\n      case 'cursor-north':\n        handleEvent = up;\n        break;\n      case 'cursor-south':\n        handleEvent = down;\n        break;\n      case 'cursor-west':\n        handleEvent = left;\n        break;\n      case 'cursor-east':\n        handleEvent = right;\n        break;\n      case 'cursor-north-west':\n        handleEvent = upLeft;\n        break;\n      case 'cursor-south-east':\n        handleEvent = downRight;\n        break;\n      case 'cursor-north-east':\n        handleEvent = upRight;\n        break;\n      case 'cursor-south-west':\n        handleEvent = downLeft;\n        break;\n      default:\n        handleEvent = dragging;\n        break;\n\n    }\n    document.onmousemove = e => handleEvent(e);\n    this.handleMouseUp();\n  }\n  render() {\n    const { content, visible } = this.props;\n    return (\n      <div\n        className={visible ? 'dsView actived' : 'dsView hide'}\n        style={this.state.dsStyle}\n        id=\"dsView\"\n        onMouseDown={this.handleScale}\n      >\n        {content}\n        <span className=\"dsView-scale\" id=\"cursor-north\"></span>\n        <span className=\"dsView-scale\" id=\"cursor-south\"></span>\n        <span className=\"dsView-scale\" id=\"cursor-west\"></span>\n        <span className=\"dsView-scale\" id=\"cursor-east\"></span>\n        <span className=\"dsView-scale\" id=\"cursor-north-west\"></span>\n        <span className=\"dsView-scale\" id=\"cursor-north-east\"></span>\n        <span className=\"dsView-scale\" id=\"cursor-south-west\"></span>\n        <span className=\"dsView-scale\" id=\"cursor-south-east\"></span>\n      </div>\n    );\n  }\n}\nexport default DragScaleView;\n","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport DragScaleView from './DragScaleView';\nimport './style.less';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      visible: true\n    };\n    this.dsStyle = {\n      width: '300px',\n      height: '300px',\n      minWidth: '30px',\n      minHeight: '30px'\n    };\n    \n  }\n\n  render() {\n    return (\n      <div>\n        <DragScaleView\n          visible={this.state.visible}\n          dsStyle={this.dsStyle}\n        />\n      </div>\n    );\n  }\n}\n\nrender(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/style.ec0793f5.less\";"],"sourceRoot":""}